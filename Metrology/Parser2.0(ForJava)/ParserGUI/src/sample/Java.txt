public class Metrics {
    class Comments{
        public ArrayList<String> commentsList = new ArrayList<String>();
        public ArrayList<Boolean> isComment = new ArrayList<Boolean>();

        public Comments(){
            commentsList.clear();
            isComment.clear();
        }

        public void addComment(String currentString){
            commentsList.add(currentString);
            isComment.add(true);
        }

        public void markNonComment(){
            isComment.add(false);
        }

    }
    public final int USUAL_STRING = 0;
    public final int INLINE_COMMENT = 1;
    public final int BEGINNING_OF_MULTILINE_COMMENT = 2;
    public final int INFINITY = 999;

    private Pattern doubleSlashPattern = Pattern.compile("//");
    private Pattern openingSlashPattern = Pattern.compile("/[*]");
    private Pattern closingSlashPattern = Pattern.compile("[*]/");

    protected Comments comments;

    protected ArrayList<String> allStrings = new ArrayList<String>();
    protected ArrayList<String> stringsWithoutComments = new ArrayList<String>();
    protected ArrayList<String> sourceCodeStringsOnly = new ArrayList<String>();

    public Metrics(){
        allStrings = Controller.getStringsFromTextArea();
        comments = getComments();
        stringsWithoutComments = getStringsWithoutComments();
        sourceCodeStringsOnly = getSourceCodeStringsOnly();
    }

    public ArrayList<String> getStringsWithoutComments(){
        ArrayList<String> stringsNonComments = new ArrayList<String>();
        stringsNonComments.clear();
        String allCodeInline = Controller.textToAnalyse.getText();
        String codeWithoutCommentsInline = removeComments(allCodeInline);
        int startPos = 0;
        int i = 0;
        while(i<codeWithoutCommentsInline.length()){
            if((codeWithoutCommentsInline.charAt(i)=='\n')||(i==codeWithoutCommentsInline.length()-1)){
                if(i!=0){
                    String stringToAdd = codeWithoutCommentsInline.substring(startPos,i+1);
                    stringToAdd = stringToAdd.replaceAll("\n","");
                    stringsNonComments.add(stringToAdd);
                    startPos = i+1;
                }
            }
            i++;
        }
        return stringsNonComments;
    }

    public static String removeCharAt(String s, int pos) {

        return s.substring(0,pos)+" "+s.substring(pos+1);

    }

    private String removeComments(String sourceCode){
        int typeOfComment = 0;
        int i = 0;
        while(i<sourceCode.length()){
            if(typeOfComment==0){
                if((sourceCode.charAt(i)=='/')&&(sourceCode.charAt(i+1)=='/')){
                    typeOfComment=INLINE_COMMENT;
                    sourceCode = removeCharAt(sourceCode,i);
                    i++;
                    sourceCode = removeCharAt(sourceCode,i);
                    i++;
                }else if((sourceCode.charAt(i)=='/')&&(sourceCode.charAt(i+1)=='*')){
                    typeOfComment=BEGINNING_OF_MULTILINE_COMMENT;
                    sourceCode = removeCharAt(sourceCode,i);
                    i++;
                    sourceCode = removeCharAt(sourceCode,i);
                    i++;
                }else{
                    i++;
                }
            }else{
                if((sourceCode.charAt(i)=='\n')){
                    if(typeOfComment==INLINE_COMMENT) {
                        typeOfComment = 0;
                    }
                    i++;
                }else if((sourceCode.charAt(i)=='*')&&(sourceCode.charAt(i+1)=='/')){
                    if(typeOfComment==BEGINNING_OF_MULTILINE_COMMENT){
                        typeOfComment=0;
                        sourceCode = removeCharAt(sourceCode,i);
                        i++;
                        sourceCode = removeCharAt(sourceCode,i);
                        i++;
                    }else{
                        sourceCode = removeCharAt(sourceCode,i);
                        i++;
                    }
                }else{
                    sourceCode = removeCharAt(sourceCode,i);
                    i++;
                }

            }
        }
        return sourceCode;
    }

    public ArrayList<String> getSourceCodeStringsOnly(){
        ArrayList<String> sourceCodeStrings = new ArrayList<String>();
        for(String currentString:stringsWithoutComments){
            if(!((currentString.isEmpty()==true)||(currentString.matches("[ \t\n]{1,}")))){
                sourceCodeStrings.add(currentString);
            }
        }
        return sourceCodeStrings;
    }

    private boolean matchString(String stringToTest, String regEx){
        Pattern pattern = Pattern.compile(regEx);
        Matcher matcher = pattern.matcher(stringToTest);
        return matcher.matches();
    }

    public int typeOfString(String testString) {
        int doubleSlashFirstPos = INFINITY;
        int openingSlashPos = INFINITY;
        int closingSlashPos = INFINITY;

        Matcher matchDoubleSlash = doubleSlashPattern.matcher(testString);
        if (matchDoubleSlash.find()) {
            doubleSlashFirstPos = matchDoubleSlash.start();
        }
        Matcher matchOpeningSlash = openingSlashPattern.matcher(testString);
        while (matchOpeningSlash.find()) {
            openingSlashPos = matchOpeningSlash.start();
        }
        Matcher matchClosingSlash = closingSlashPattern.matcher(testString);
        while (matchClosingSlash.find()) {
            closingSlashPos = matchClosingSlash.start();
        }
        if ((doubleSlashFirstPos < openingSlashPos) ||
                ((openingSlashPos < closingSlashPos) && closingSlashPos != INFINITY)) {
            return INLINE_COMMENT;
        }else if (((openingSlashPos > closingSlashPos) && openingSlashPos != INFINITY) ||
                (openingSlashPos < closingSlashPos) && closingSlashPos == INFINITY) {
            return BEGINNING_OF_MULTILINE_COMMENT;
        }else{
            return 0;
        }
    }

    public boolean hasCommentClosingSlash(String stringToMatch){
        String commentClosingSlash = "(.)*[*]/(.)*";
        if(matchString(stringToMatch,commentClosingSlash)){
            return true;
        }else{
            return false;
        }
    }

    public Comments getComments(){
        Comments comments = new Comments();
        boolean multilineComment = false;
        for(String currentString:allStrings){
            if(multilineComment){
                comments.addComment(currentString);
                if(hasCommentClosingSlash(currentString)){
                    if(typeOfString(currentString)==BEGINNING_OF_MULTILINE_COMMENT){
                        multilineComment = true;
                    }else{
                        multilineComment = false;
                    }
                }
            }else{
                switch(typeOfString(currentString)){
                    case INLINE_COMMENT:{
                        comments.addComment(currentString);
                        break;
                    }
                    case BEGINNING_OF_MULTILINE_COMMENT: {
                        comments.addComment(currentString);
                        multilineComment = true;
                        break;
                    }
                    default:{
                        comments.markNonComment();
                    }
                }
            }
        }
        return comments;
    }
}

public class Sloc extends Metrics {
    private Comments comments;
    private int stringsCount = 0;
    private int emptyStringsCount = 0;
    private int commentsCount = 0;
    private float commentsPercentage = 0;

    private ArrayList<String> allStrings = new ArrayList<String>();
    private ArrayList<String> sourceCodeStringsOnly = new ArrayList<String>();
    private ArrayList<Integer> functionsStringsCount = new ArrayList<Integer>();
    private ArrayList<Integer> functionsSourceCodeStringsCount = new ArrayList<Integer>();
    private ArrayList<Integer> classesStringsCount = new ArrayList<Integer>();
    private ArrayList<Integer> classesSourceCodeStringsCount = new ArrayList<Integer>();

    private Pattern functionDeclarationPattern = Pattern.compile("((public|private)[ \t]{1,}){0,1}" +
            "((void|int|[A-Za-z]{1,})[ \t]{1,})[::_A-Za-z]{1,}[ \t]*\\((((void|int|[A-Za-z]{1,})" +
            "[ \t]{1,})[:&*_A-Za-z]{1,}[ \t]*[,]*)*\\)");
    private Pattern classDeclarationPattern = Pattern.compile("(.)*class[ \t]{1,}[A-Za-z_]{1,}");

    public Sloc(){
        this.allStrings = super.allStrings;
        stringsCount = this.allStrings.size();
        comments = super.comments;
        sourceCodeStringsOnly = super.sourceCodeStringsOnly;
    }

    public ArrayList<Integer> getFunctionsStringsCount(){
        return functionsStringsCount;
    }

    public ArrayList<Integer> getFunctionsSourceCodeStringsCount(){
        return functionsSourceCodeStringsCount;
    }

    public ArrayList<Integer> getClassesStringsCount(){
        return classesStringsCount;
    }

    public ArrayList<Integer> getClassesSourceCodeStringsCount(){
        return classesSourceCodeStringsCount;
    }

    public float getAverage(ArrayList<Integer> myIntegers){
        int sum = 0;
        int numberOfIntegers = myIntegers.size();
        for(int number:myIntegers){
            sum+=number;
        }

        return (float)sum/(float)numberOfIntegers;
    }

    public int getStringsCount(){
        return stringsCount;
    }

    public int getEmptyStringsCount(){
        countEmptyStrings();
        return emptyStringsCount;
    }

    public int getCommentsCount(){
        countComments();
        return commentsCount;
    }

    public float getCommentsPercentage(){
        countCommentsPercentage();
        return (commentsPercentage*100);
    }

    public float getAverageFunctionsStringsCount(){
        countFunctionsStrings();
        return getAverage(functionsStringsCount);
    }

    public float getAverageFunctionsSourceCodeStringsCount(){
        countFunctionsSourceCodeStrings();
        return getAverage(functionsSourceCodeStringsCount);
    }

    public float getAverageClassesStringsCount(){
        countClassesStrings();
        return getAverage(classesStringsCount);
    }

    public float getAverageClassesSourceCodeStringsCount(){
        countClassesSourceCodeStrings();
        return getAverage(classesSourceCodeStringsCount);
    }

    private void countEmptyStrings(){
        emptyStringsCount = 0;
        for(String currentString:allStrings){
            if(currentString.isEmpty()){
                emptyStringsCount++;
            }
        }
    }

    private void countComments(){
        commentsCount = comments.commentsList.size();
    }

    private void countCommentsPercentage(){
        commentsPercentage =((float) commentsCount)/((float) stringsCount);
    }

    private void countFunctionsStrings(){
        functionsStringsCount = getStringsOfBlock(functionDeclarationPattern, stringsWithoutComments);
    }

    private void countFunctionsSourceCodeStrings(){
        functionsSourceCodeStringsCount = getStringsOfBlock(functionDeclarationPattern,sourceCodeStringsOnly);
    }

    private void countClassesStrings(){
        classesStringsCount = getStringsOfBlock(classDeclarationPattern, stringsWithoutComments);

    }

    private void countClassesSourceCodeStrings(){
        classesSourceCodeStringsCount = getStringsOfBlock(classDeclarationPattern,sourceCodeStringsOnly);
    }

    private ArrayList<Integer> getStringsOfBlock(Pattern blockDeclarationPattern, ArrayList<String> sourceToAnalyze){
        ArrayList<Integer> stringsOfBlockCount = new ArrayList<Integer>();
        boolean insideFunction = false;
        boolean openBraceTookPlace = false;
        int braceCount = 0;
        int stringsCount = 0;
        int braceInspectionStartPos = 0;
        int startIndex = 0;
        int endIndex = 0;
        int i = 0;
        while(i<sourceToAnalyze.size()){
            String currentString = sourceToAnalyze.get(i);
            if(insideFunction){
                if(typeOfString(currentString)==USUAL_STRING){
                    for(int j = braceInspectionStartPos; j<currentString.length();j++){
                        if (currentString.charAt(j)=='{'){
                            braceCount++;
                            openBraceTookPlace = true;
                        }else if(currentString.charAt(j)=='}'){
                            braceCount--;
                        }
                    }
                    if((braceCount==0)&&openBraceTookPlace){
                        endIndex = i;
                        stringsCount = endIndex-startIndex+1;
                        stringsOfBlockCount.add(stringsCount);
                        insideFunction = false;
                    }
                    braceInspectionStartPos = 0;
                }
                i++;
            }else{
                Matcher matchFunctionDeclaration = blockDeclarationPattern.matcher(currentString);
                if(matchFunctionDeclaration.find()&&(typeOfString(currentString)==USUAL_STRING)){
                    insideFunction = true;
                    braceInspectionStartPos = matchFunctionDeclaration.end();
                    braceCount = 0;
                    stringsCount = 0;
                    startIndex = i;
                    openBraceTookPlace = false;
                }else{
                    i++;
                }
            }
        }
        return stringsOfBlockCount;
    }
}

public class Jilba extends Metrics {
    private Comments comments;
    private int numberOfOperators = 0;
    private int CL = 0;
    private int arithmeticOperatorCount = 0;
    private int compoundAssignmentOperatorCount = 0;
    private int comparisonOperatorCount = 0;
    private int logicalOperatorCount = 0;
    private int cyclicOperatorCount = 0;
    private int otherOperatorCount = 0;
    private int maxDepth = 0;
    public String allCodeInline="";
    private Pattern patternCL = Pattern.compile("([ \t]*if([ \t]|[(])|[?].+?[:].+)");
    private Pattern ifCLMatchPattern = Pattern.compile("[ \t]*if[ \t]*[(](.){1,}[)](.)*");

    private Pattern arithmeticOperatorPattern = Pattern.compile("[a-zA-Z \t0-9)](=|[+]|-|[*]|[/]|%|[+][+]|[-][-])[a-zA-Z \t0-9(;]");
    private Pattern compoundAssignmentOperatorPattern = Pattern.compile("(([-+*/%&|^])|<{2}|>{2})=(?!=)");
    private Pattern comparisonOperatorPattern = Pattern.compile("[a-zA-Z \t0-9)](==|!=|>|<|>=|<=)[a-zA-Z \t0-9(;]");
    private Pattern logicalOperatorPattern = Pattern.compile("(![a-zA-Z \t(]|[a-zA-Z \t0-9)](&&|[|][|])[a-zA-Z \t0-9(;])");
    private Pattern otherOperatorsPattern = Pattern.compile("(![a-zA-Z \t(]|[a-zA-Z \t)](~|&|\\||^|<<|>>|->|\\.|->\\*|\\.\\*|\\[|,|sizeof|alignof|typeid)[a-zA-Z \t0-9(;])");

    private ArrayList<String> stringsWithoutComments = new ArrayList<String>();
    protected ArrayList<String> sourceCodeStringsOnly = new ArrayList<String>();

    public Jilba(){
        comments = super.comments;
        stringsWithoutComments = super.stringsWithoutComments;
        sourceCodeStringsOnly = super.sourceCodeStringsOnly;
        for(String currentString:stringsWithoutComments){
            currentString = currentString.replaceAll("\n","");
            allCodeInline+=currentString;
        }
        countOperators();
    }

    public int getCL(){
        return CL;
    }

    public float getRelativeCL(){
        return (float)CL/(float)numberOfOperators;
    }

    public int getNumberOfOperators(){
        return numberOfOperators;
    }

    public int getMaxDepth(){
        countMaxCLDepth(-1,allCodeInline,false);
        return maxDepth;
    }

    public void countOperators(){
        CL = 0;
        arithmeticOperatorCount = 0;
        compoundAssignmentOperatorCount = 0;
        comparisonOperatorCount = 0;
        cyclicOperatorCount = 0;
        otherOperatorCount = 0;
        for(String currentString:stringsWithoutComments){
                Matcher matchCL = patternCL.matcher(currentString);
                Matcher matchArithmeticOperators = arithmeticOperatorPattern.matcher(currentString);
                Matcher matchCompoundOperators = compoundAssignmentOperatorPattern.matcher(currentString);
                Matcher matchBitwiseOperators = otherOperatorsPattern.matcher(currentString);
                Matcher matchComparisonOperators = comparisonOperatorPattern.matcher(currentString);
                Matcher matchCyclicOperators = cyclicOperatorPattern.matcher(currentString);
                Matcher matchLogicalOperators = logicalOperatorPattern.matcher(currentString);

                while(matchCL.find()){
                    CL++;
                }
                while(matchArithmeticOperators.find()){
                    arithmeticOperatorCount++;
                }
                while(matchCompoundOperators.find()){
                    compoundAssignmentOperatorCount++;
                }
                while(matchComparisonOperators.find()){
                    comparisonOperatorCount++;
                }
                while(matchLogicalOperators.find()){
                    logicalOperatorCount++;
                }
                while(matchCyclicOperators.find()){
                    cyclicOperatorCount++;
                }
                while(matchBitwiseOperators.find()){
                    otherOperatorCount++;
                }
        }

        numberOfOperators = CL+ arithmeticOperatorCount + compoundAssignmentOperatorCount+cyclicOperatorCount
                +comparisonOperatorCount+logicalOperatorCount+ otherOperatorCount ;

    }

    public int getLastOvalBracePos(String substring){
        Matcher findIfCL = ifCLMatchPattern.matcher(substring);
        findIfCL.find();
        int countOvalBrace = 0;
        boolean ovalBraceTookPlace = false;
        int i = 0;
        for(i = findIfCL.start();i<substring.length();i++){
            if(substring.charAt(i)=='('){
                countOvalBrace++;
                ovalBraceTookPlace = true;
            }else if(substring.charAt(i)==')'){
                countOvalBrace--;
            }
            if(ovalBraceTookPlace&&countOvalBrace==0){
                break;
            }
        }
        return i;
    }

    public int getFigureBracePos(String substring){
        Matcher matchBrace = braceMatchPattern.matcher(substring);
        matchBrace.find();
        int i=0;
        for(i=matchBrace.start();i<substring.length();i++){
            if(substring.charAt(i)==''){
                break;
            }
        }
        return i;
    }

    public int getLastFigureBracePos(String substring){
        Matcher matchBrace = braceMatchPattern.matcher(substring);
        matchBrace.find();
        int countFigureBrace = 0;
        boolean figureBraceTookPlace = false;
        int i = 0;
        for(i = matchBrace.start();i<substring.length();i++){
            if(substring.charAt(i)==''){
                countFigureBrace++;
                figureBraceTookPlace = true;
            }else if(substring.charAt(i)==''){
                countFigureBrace--;
            }
            if(figureBraceTookPlace&&countFigureBrace==0){
                break;
            }
        }
        return i;
    }

    public void countMaxCLDepth(int depth, String substring, boolean insideCL) {
        Matcher matchIfCL = ifCLMatchPattern.matcher(substring);
        Matcher matchBrace = braceMatchPattern.matcher(substring);

        if (depth > maxDepth) {
            maxDepth = depth;
        }

        if (insideCL) {
            if (matchIfCL.matches()) {
                int i = getLastOvalBracePos(substring);
                countMaxCLDepth(depth + 1, substring.substring(i + 1), true);
            } else if (matchBrace.matches()) {
                int figureBracePos = getFigureBracePos(substring);
                int lastFigureBracePos = getLastFigureBracePos(substring);
                countMaxCLDepth(depth + 1, substring.substring(figureBracePos + 1, lastFigureBracePos), false);
                countMaxCLDepth(depth, substring.substring(lastFigureBracePos + 1), false);
            }else{
                if(matchIfCL.find()){
                    int ifCLStart = matchIfCL.start();
                    countMaxCLDepth(depth, substring.substring(ifCLStart), false);
                }else{
                    depth++;
                    if (depth > maxDepth) {
                        maxDepth = depth;
                    }
                    return;
                }
            }
        } else {
            if (matchIfCL.find()) {
                int lastOvalBracePos = getLastOvalBracePos(substring);
                countMaxCLDepth(depth, substring.substring(lastOvalBracePos + 1), true);
            }
        }
    }
}
